services:
    # PostgreSQL 데이터베이스
    postgres:
        image: postgres:16-alpine
        container_name: cookie-pokie-postgres
        restart: always
        environment:
            POSTGRES_USER: ${DB_USERNAME:-postgres}
            POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
            POSTGRES_DB: ${DB_NAME:-cookie_pokie}
        ports:
            - "${DB_PORT:-5432}:5432"
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - cookie-pokie-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
            interval: 10s
            timeout: 5s
            retries: 5

    # 백엔드 서버
    server:
        build:
            context: ./server
            dockerfile: Dockerfile
        container_name: cookie-pokie-server
        restart: always
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            PORT: ${SERVER_PORT:-4000}
            DB_HOST: postgres
            DB_PORT: 5432
            DB_USERNAME: ${DB_USERNAME:-postgres}
            DB_PASSWORD: ${DB_PASSWORD:-postgres}
            DB_NAME: ${DB_NAME:-cookie_pokie}
            CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
        ports:
            - "${SERVER_PORT:-4000}:4000"
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - cookie-pokie-network

    # 프론트엔드 클라이언트
    client:
        build:
            context: ./client
            dockerfile: Dockerfile
            args:
                NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:4000/api}
        container_name: cookie-pokie-client
        restart: always
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            PORT: 3000
        ports:
            - "${CLIENT_PORT:-3000}:3000"
        depends_on:
            - server
        networks:
            - cookie-pokie-network

networks:
    cookie-pokie-network:
        driver: bridge

volumes:
    postgres-data:
